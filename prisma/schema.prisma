// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}





enum StatusActivity {
  IDLE
  PENDING
  INPROGRESS
  DONE
  CANCELED
}


///////////////////////////////



model User {
  id    Int       @id @default(autoincrement())
  name  String    @unique @db.VarChar(50)
  dni  String    @unique @db.VarChar(50)
  email     String    @unique @db.VarChar(100)
  maxHours    Int       
  creationDate DateTime  @default(now())

 
  projectsAssigned  UsersProjects[] 
  tasksAssigned     Task[]            @relation("ResponsibleTask") 
  
  @@map("Users") 
}

model Project {
  id    Int           @id @default(autoincrement())
  projectName  String        @db.VarChar(100)
  description  String?
  creationDate    DateTime      @default(now())
  dateStart DateTime    
  dateEnd DateTime     
  dateFinished DateTime    
  
  // Relaciones
  usersProject       UsersProjects[] 
  tasks             Task[]           
  
  @@map("Projects") 
}

model Rate {
   id  Int       @id @default(autoincrement()) @map("id")
    name String    @db.VarChar(50) @map("name")
    price Decimal   @db.Decimal(10, 2)
    currency String    @default("USD") @db.VarChar(6)     

  // Una Rate puede ser usada en muchas asignaciones (User-Project)
  userProjects  UsersProjects[] @relation("RateAssing") 
  
  @@map("Rates")
}

//////////////////////////////////////////////


model UsersProjects {
  userId           Int       @map("user_id")
  projectId        Int       @map("project_id")
  fechaAssignment  DateTime  @default(now()) @map("fecha_asignacion")

  // El Rate fijado para este User en este Project
  rateId           Int       @map("rate_id")
  rate             Rate      @relation("RateAssing", fields: [rateId], references: [id])

  // Claves foráneas de la asignación
  user             User      @relation(fields: [userId], references: [id])
  project          Project   @relation(fields: [projectId], references: [id])
  
  // Clave primaria compuesta
  @@id([userId, projectId])
  @@map("Users_Proyects") 
}

///////////////////////////

model Task {
    id        Int       @id @default(autoincrement()) @map("id")
   
   name     String    @db.VarChar(200) @map("name")
   overview     String?   @db.Text
   status       StatusActivity    @default(IDLE)
   position Int? @default(0)
  
  
  // Project al que pertenece
  projectId       Int       @map("project_id")
  project         Project   @relation(fields: [projectId], references: [id])

  // User responsable de la Task
  userId   Int?      @map("user_id")
  user     User?     @relation("ResponsibleTask", fields: [userId], references: [id])

  @@map("Tasks") 
}

